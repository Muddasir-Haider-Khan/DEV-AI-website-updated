// Generated by Framer (3d3d426)

import { addFonts, addPropertyControls, ControlType, cx, CycleVariantState, getFontsFromSharedStyle, RichText, useActiveVariantCallback, useComponentViewport, useLocaleInfo, useOnVariantChange, useVariantState, withCSS, withFX, withOptimizedAppearEffect } from "framer";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";
import { useRef } from "react";
import * as sharedStyle from "../css/D1fS_zrfW";
const MotionDivWithFXWithOptimizedAppearEffect = withOptimizedAppearEffect(withFX(motion.div));

const cycleOrder = ["jJjNvxYqs", "iMwxIHIMa"];

const serializationHash = "framer-vL2XT"

const variantClassNames = {iMwxIHIMa: "framer-v-107oqav", jJjNvxYqs: "framer-v-1x94tzr"};

function addPropertyOverrides(overrides, ...variants) {
const nextOverrides = {}
variants?.forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]))
return nextOverrides
}

const transition1 = {bounce: 0.2, delay: 1.5, duration: 0.4, type: "spring"}

const animation = {opacity: 1, rotate: 0, rotateX: 0, rotateY: 0, scale: 1, skewX: 0, skewY: 0, transition: transition1, x: 0, y: 0}

const animation1 = {opacity: 0.001, rotate: 0, rotateX: 0, rotateY: 0, scale: 1, skewX: 0, skewY: 0, x: 0, y: 0}

const transition2 = {bounce: 0.2, delay: 0, duration: 1.8, type: "spring"}

const Transition = ({value, children}) => {
const config = React.useContext(MotionConfigContext)
const transition = value ?? config.transition
const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
return <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
}

const Variants = motion.create(React.Fragment)

const humanReadableVariantMap = {Full: "iMwxIHIMa", Half: "jJjNvxYqs"}

const getProps = ({height, id, width, ...props}) => { return {...props, variant: humanReadableVariantMap[props.variant] ?? props.variant ?? "jJjNvxYqs"} }

const createLayoutDependency = (props, variants) => {if (props.layoutDependency) return variants.join('-') + props.layoutDependency
return variants.join('-')}

export interface Props extends React.HTMLAttributes<HTMLDivElement> { style?: Record<string, unknown>;className?: string;layoutId?: string | number;variant?: keyof typeof humanReadableVariantMap; }

const Component = React.forwardRef<HTMLDivElement, Props>(function(props, ref) {

const fallbackRef = useRef<HTMLElement>(null)

const refBinding = ref ?? fallbackRef

const defaultLayoutId = React.useId()

const { activeLocale, setLocale } = useLocaleInfo()

const componentViewport = useComponentViewport()

const {style, className, layoutId, variant, ...restProps} = getProps(props)

const {baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants} = useVariantState({cycleOrder, defaultVariant: "jJjNvxYqs", ref: refBinding, variant, variantClassNames})

const layoutDependency = createLayoutDependency(props, variants)

const { activeVariantCallback, delay } = useActiveVariantCallback(baseVariant)

const onAppear1i5fyig = activeVariantCallback(async (...args) => {
await delay(() => setVariant("iMwxIHIMa"), 1600)
})

useOnVariantChange(baseVariant, {default: onAppear1i5fyig})

const sharedStyleClassNames = [sharedStyle.className]

const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames)

const isDisplayed = () => {
if (baseVariant === "iMwxIHIMa") return true
return false
}

return (<LayoutGroup id={layoutId ?? defaultLayoutId}><Variants animate={variants} initial={false}><Transition value={transition2}><MotionDivWithFXWithOptimizedAppearEffect {...restProps} {...gestureHandlers} __framer__presenceAnimate={animation} __framer__presenceInitial={animation1} __perspectiveFX={false} __smartComponentFX __targetOpacity={1} className={cx(scopingClassNames, "framer-1x94tzr", className, classNames)} data-border data-framer-appear-id={"1x94tzr"} data-framer-name={"Half"} data-highlight layoutDependency={layoutDependency} layoutId={"jJjNvxYqs"} optimized ref={refBinding} style={{"--border-bottom-width": "1px", "--border-color": "var(--token-313dd4d6-9859-4bdd-889b-954a849d13e3, rgb(34, 34, 34))", "--border-left-width": "1px", "--border-right-width": "1px", "--border-style": "solid", "--border-top-width": "1px", backgroundColor: "var(--token-b2fb23d9-6070-4f2d-b3d0-2fe68c4f2aab, rgba(13, 13, 13, 0.8))", borderBottomLeftRadius: 20, borderBottomRightRadius: 20, borderTopLeftRadius: 20, borderTopRightRadius: 20, ...style}} {...addPropertyOverrides({iMwxIHIMa: {"data-framer-name": "Full"}}, baseVariant, gestureVariant)}><motion.div className={"framer-tcvtcw"} data-framer-name={"new"} layoutDependency={layoutDependency} layoutId={"XGstitkOs"} style={{backgroundColor: "var(--token-a888adc2-3d05-4d6f-88b7-8dab97418795, rgb(129, 74, 200))", borderBottomLeftRadius: 12, borderBottomRightRadius: 12, borderTopLeftRadius: 12, borderTopRightRadius: 12}}><RichText __fromCanvasComponent children={<React.Fragment><motion.p className={"framer-styles-preset-x6ge9v"} data-styles-preset={"D1fS_zrfW"}>New</motion.p></React.Fragment>} className={"framer-sca6v"} fonts={["Inter"]} layoutDependency={layoutDependency} layoutId={"PFfZigrhs"} style={{"--framer-link-text-color": "rgb(0, 153, 255)", "--framer-link-text-decoration": "underline"}} verticalAlignment={"top"} withExternalLayout/></motion.div>{isDisplayed() && (<RichText __fromCanvasComponent children={<React.Fragment><motion.p className={"framer-styles-preset-x6ge9v"} data-styles-preset={"D1fS_zrfW"}> Automated Lead Generation</motion.p></React.Fragment>} className={"framer-finzms"} fonts={["Inter"]} layoutDependency={layoutDependency} layoutId={"ul__Cbzif"} style={{"--framer-link-text-color": "rgb(0, 153, 255)", "--framer-link-text-decoration": "underline"}} verticalAlignment={"top"} withExternalLayout/>)}</MotionDivWithFXWithOptimizedAppearEffect></Transition></Variants></LayoutGroup>)

});

const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-vL2XT.framer-1ygocug, .framer-vL2XT .framer-1ygocug { display: block; }", ".framer-vL2XT.framer-1x94tzr { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 5px; height: min-content; justify-content: center; overflow: hidden; padding: 2px; position: relative; width: min-content; will-change: var(--framer-will-change-override, transform); }", ".framer-vL2XT .framer-tcvtcw { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 4px 8px 4px 8px; position: relative; width: min-content; will-change: var(--framer-will-change-override, transform); }", ".framer-vL2XT .framer-sca6v { flex: none; height: auto; position: relative; white-space: pre; width: auto; }", ".framer-vL2XT .framer-finzms { flex: none; height: auto; pointer-events: none; position: relative; white-space: pre; width: auto; }", ".framer-vL2XT.framer-v-107oqav.framer-1x94tzr { padding: 2px 10px 2px 2px; }", ...sharedStyle.css, ".framer-vL2XT[data-border=\"true\"]::after, .framer-vL2XT [data-border=\"true\"]::after { content: \"\"; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }"]

/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 29
 * @framerIntrinsicWidth 49
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["auto","auto"]},"iMwxIHIMa":{"layout":["auto","auto"]}}}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerAutoSizeImages true
 * @framerComponentViewportWidth true
 * @framerColorSyntax true
 */
const FramerOoclMjOeu: React.ComponentType<Props> = withCSS(Component, css, "framer-vL2XT") as typeof Component;
export default FramerOoclMjOeu;

FramerOoclMjOeu.displayName = "hero badge";

FramerOoclMjOeu.defaultProps = {height: 29, width: 49};

addPropertyControls(FramerOoclMjOeu, {variant: {options: ["jJjNvxYqs", "iMwxIHIMa"], optionTitles: ["Half", "Full"], title: "Variant", type: ControlType.Enum}} as any)

addFonts(FramerOoclMjOeu, [{explicitInter: true, fonts: [{family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F", url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2", weight: "400"}, {family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116", url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2", weight: "400"}, {family: "Inter", source: "framer", style: "normal", unicodeRange: "U+1F00-1FFF", url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2", weight: "400"}, {family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0370-03FF", url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2", weight: "400"}, {family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF", url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2", weight: "400"}, {family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD", url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2", weight: "400"}, {family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB", url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2", weight: "400"}]}, ...getFontsFromSharedStyle(sharedStyle.fonts)], {supportsExplicitInterCodegen: true})