// Generated by Framer (013b13c)

import { addFonts, addPropertyControls, ComponentViewportProvider, ControlType, cx, CycleVariantState, getFonts, SmartComponentScopedContainer, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "framer";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";
import { useRef } from "react";
import Particles from "https://framerusercontent.com/modules/wb6ZrZlCLNQ5HHBJtNND/c1GLxCsQBQvlLXhkz7er/Particles.js";
const ParticlesFonts = getFonts(Particles);

const serializationHash = "framer-lL6no"

const variantClassNames = {RiIgZ5j_u: "framer-v-1wbi9wi"};

function addPropertyOverrides(overrides, ...variants) {
const nextOverrides = {}
variants?.forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]))
return nextOverrides
}

const transition1 = {bounce: 0.2, delay: 0, duration: 0.4, type: "spring"}

const Transition = ({value, children}) => {
const config = React.useContext(MotionConfigContext)
const transition = value ?? config.transition
const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
return <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
}

const Variants = motion.create(React.Fragment)

const getProps = ({backdrop, height, id, width, ...props}) => { return {...props, CDhM3va4w: backdrop ?? props.CDhM3va4w ?? "rgb(0, 0, 0)"} }

const createLayoutDependency = (props, variants) => {if (props.layoutDependency) return variants.join('-') + props.layoutDependency
return variants.join('-')}

export interface Props extends React.HTMLAttributes<HTMLDivElement> { style?: Record<string, unknown>;className?: string;layoutId?: string | number;backdrop?: string; }

const Component = React.forwardRef<HTMLDivElement, Props>(function(props, ref) {

const fallbackRef = useRef<HTMLElement>(null)

const refBinding = ref ?? fallbackRef

const defaultLayoutId = React.useId()

const { activeLocale, setLocale } = useLocaleInfo()

const componentViewport = useComponentViewport()

const {style, className, layoutId, variant, CDhM3va4w, ...restProps} = getProps(props)

const {baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants} = useVariantState({defaultVariant: "RiIgZ5j_u", ref: refBinding, variant, variantClassNames})

const layoutDependency = createLayoutDependency(props, variants)

const sharedStyleClassNames = []

const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames)

return (<LayoutGroup id={layoutId ?? defaultLayoutId}><Variants animate={variants} initial={false}><Transition value={transition1}><motion.div {...restProps} {...gestureHandlers} className={cx(scopingClassNames, "framer-1wbi9wi", className, classNames)} data-framer-name={"Particles holder"} layoutDependency={layoutDependency} layoutId={"RiIgZ5j_u"} ref={refBinding} style={{...style}}><ComponentViewportProvider ><SmartComponentScopedContainer className={"framer-134z6np-container"} isAuthoredByUser isModuleExternal layoutDependency={layoutDependency} layoutId={"E7XyE4s_q-container"} nodeId={"E7XyE4s_q"} rendersWithMotion scopeId={"VNjVul3QO"} style={{opacity: 0.5}}><Particles background={CDhM3va4w} clickOptions={{clickEnabled: false, clickModes: "push"}} color={"rgb(255, 255, 255)"} colors={[]} densityOptions={{densityArea: 5000, densityEnable: false, densityFactor: 50}} fpsOptions={60} height={"100%"} hoverOptions={{hoverEnabled: false, hoverForce: 10, hoverModes: "none", hoverParallax: false, hoverSmooth: 10}} id={"E7XyE4s_q"} layoutId={"E7XyE4s_q"} linksOptions={{linksColor: "rgb(255, 255, 255)", linksDistance: 100, linksEnabled: false, linksOpacity: 0.2, linksWidth: 1}} modeOptions={{bubbleDistance: 100, bubbleDuration: 0.4, bubbleSize: 40, connectDistance: 100, connectLinksOpacity: 0.2, connectRadius: 50, grabDistance: 100, grabLinksOpacity: 0.2, pushQuantity: 4, removeQuantity: 4, repulseDistance: 200, repulseDuration: 1.2, trailDelay: 0.1, trailQuantity: 10}} moveOptions={{moveAttractDistance: 100, moveAttractEnabled: false, moveDirection: "inside", moveEnabled: true, moveGravityAcceleration: 1, moveGravityEnabled: false, moveGravityMaxSpeed: 2, moveOut: "out", moveRandom: false, moveSpeed: 0.6, moveSpinAcceleration: 1, moveSpinEnabled: false, moveStraight: false, moveTrailAmount: 100, moveTrailEnabled: false, moveVibrate: false}} number={130} opacityOptions={{opacity: 1, opacityMax: 1, opacityMin: 0, opacityType: true}} particlesID={"One"} radius={0} rotateOptions={{rotateAnimation: false, rotateDirection: "random", rotateSpeed: 5, rotateSync: false, rotateValue: 0}} shapeOptions={{characterType: "ðŸ˜Ž", imageHeight: 100, imageWidth: 100, shapeType: "circle"}} sizeOptions={{size: 0.9, sizeMax: 2, sizeMin: 1, sizeType: true}} style={{height: "100%", width: "100%"}} width={"100%"}/></SmartComponentScopedContainer></ComponentViewportProvider><motion.div className={"framer-1wt1rzf"} data-framer-name={"Void"} layoutDependency={layoutDependency} layoutId={"KxihkuBsS"} style={{backgroundColor: "var(--token-aae92d1e-1be4-447e-8038-565c6944f982, rgb(0, 0, 0))", borderBottomLeftRadius: 296, borderBottomRightRadius: 296, borderTopLeftRadius: 296, borderTopRightRadius: 296}}/></motion.div></Transition></Variants></LayoutGroup>)

});

const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-lL6no.framer-rp3ue3, .framer-lL6no .framer-rp3ue3 { display: block; }", ".framer-lL6no.framer-1wbi9wi { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 736px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 1200px; }", ".framer-lL6no .framer-134z6np-container { flex: 1 0 0px; height: 100%; position: relative; width: 1px; z-index: 0; }", ".framer-lL6no .framer-1wt1rzf { flex: none; height: 410px; left: calc(50.00000000000002% - 410px / 2); overflow: visible; position: absolute; top: calc(50.00000000000002% - 410px / 2); width: 410px; z-index: 1; }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-lL6no.framer-1wbi9wi { gap: 0px; } .framer-lL6no.framer-1wbi9wi > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-lL6no.framer-1wbi9wi > :first-child { margin-left: 0px; } .framer-lL6no.framer-1wbi9wi > :last-child { margin-right: 0px; } }"]

/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 736
 * @framerIntrinsicWidth 1200
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["fixed","fixed"]}}}
 * @framerVariables {"CDhM3va4w":"backdrop"}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerComponentViewportWidth true
 */
const FramerVNjVul3QO: React.ComponentType<Props> = withCSS(Component, css, "framer-lL6no") as typeof Component;
export default FramerVNjVul3QO;

FramerVNjVul3QO.displayName = "Particles Background";

FramerVNjVul3QO.defaultProps = {height: 736, width: 1200};

addPropertyControls(FramerVNjVul3QO, {CDhM3va4w: {defaultValue: "rgb(0, 0, 0)", title: "Backdrop", type: ControlType.Color}} as any)

addFonts(FramerVNjVul3QO, [{explicitInter: true, fonts: []}, ...ParticlesFonts], {supportsExplicitInterCodegen: true})